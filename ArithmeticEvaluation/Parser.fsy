//yacc宣言部
//F#系のものを書いておく
%{ 
//抽象構文木の型を使いたいので読んでおく
open AST 
%} 
//構文規則の開始記号であることを宣言
%start Expr 
//以下のものがtoken（符）であると指定。INT・PLUS等の各要素のご本尊はLexer.fslに書いてる
%token <int> INT 
%token PLUS MINUS TIMES DIVIDE LPAREN RPAREN
%token EOF 
//結合順序の指定。下の方が優先度高い。（”掛算・割算の方”が”足算・引算”より優先されるように設定）
%left PLUS MINUS 
%left TIMES DIVIDE 
//戻り値の型
%type <Expression> Expr
 
%%
//文法規則部（ExpはINTかExpr + Expr等等であるべし）
Expr: INT                     { Int $1 } 
    | Expr PLUS Expr          { Plus ($1, $3) } 
    | Expr MINUS Expr         { Minus ($1, $3) } 
    | Expr TIMES Expr         { Times ($1, $3) } 
    | Expr DIVIDE Expr        { Divide ($1, $3) } 
    | LPAREN Expr RPAREN      { $2 } 